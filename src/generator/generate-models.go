// The following directive is necessary to make the package coherent:

// +build ignore

package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"strings"
	"text/template"
	"time"
	"path/filepath"
)

// This program generates all models as .go files.. It can be invoked by running
// go run generator/generate-models.go
// or adding a directive //go:generate go run generator/generate-models.go <entityType>
func main() {
	args := os.Args[1:]
	fmt.Printf("Running generator for %s\n", args)

	entityType := args[0]
	fullPath := "../data/" + entityType + ".json"

	content, err := ioutil.ReadFile(fullPath)
	die(err)

	generatedFolder := filepath.Join("..", "generated", entityType)
	os.MkdirAll(generatedFolder, os.ModePerm)
	f, err := os.Create(generatedFolder + "/generated-" + entityType + ".go")
	die(err)

	packageTemplate.Execute(f, struct {
		Timestamp    time.Time
		File         string
		JSON         string
		EntityType   string
		VariableName string
	}{
		Timestamp:    time.Now(),
		File:         fullPath,
		JSON:         string(content),
		EntityType:   entityType,
		VariableName: strings.Title(entityType),
	})
}

func die(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// {{ .Timestamp }}
// using data from file: {{ .File }}
package generated

const {{ .VariableName }} = ` +
	"`" +
	`{{ .JSON }}` +
	"`" +
	`
`))
